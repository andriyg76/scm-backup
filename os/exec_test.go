package os

import (
	glog "github.com/andriyg76/glog"
	list2 "github.com/andriyg76/scm-backup/lists"
	"github.com/stretchr/testify/assert"
	"runtime"
	"testing"
)

func init() {
	glog.SetLevel(glog.TRACE)
}

func TestExecTimout(t *testing.T) {
	err, _ := ExecCmd(ExecParams{TimeoutSeconds: 1}, "ping", "localhost")
	assert.Error(t, err)
}

func TestExecNoTimout(t *testing.T) {
	err, _ := ExecCmd(ExecParams{TimeoutSeconds: 3}, "bash", "-x", "-c", "sleep 1")
	assert.Nil(t, err)
}

func TestExecFailure(t *testing.T) {
	err, _ := ExecCmd(ExecParams{TimeoutSeconds: 3}, "bash", "-x", "-c", "false")
	assert.Error(t, err)
}

func TestExecOkNoNull(t *testing.T) {
	err, _ := ExecCmd(ExecParams{TimeoutSeconds: 3, Ok: []int{1}}, "bash", "-x", "-c", "false")
	assert.Nil(t, err)
}

func TestStdin(t *testing.T) {
	cmd := []string{"cat"}
	if runtime.GOOS == "windows" {
		cmd = []string{
			"cmd", "/c", "type con",
		}
	}

	err, list := ExecCmd(ExecParams{TimeoutSeconds: 5, Stdin: "ping-pong"}, cmd[0], cmd[1:]...)
	assert.Nil(t, err)

	assert.Equal(t, list2.String("ping-pong"), list)
}

func TestExecData(t *testing.T) {
	err, list := ExecCmd(ExecParams{}, "bash", "-x", "-c",
		"echo 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 - 1  -;"+
			"echo 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 - 2  -;"+
			"sleep 0;"+
			"echo 1234567890 - end -",
	)
	assert.Nil(t, err)
	assert.Equal(t, list2.String("1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 - 1 -",
		"1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 - 2 -",
		"1234567890 - end -"), list)

	err, list = ExecCmd(ExecParams{}, "bash", "-x", "-c", "echo 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890; echo 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890; echo 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890; echo 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 echo 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890; echo 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890; echo 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 echo 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890; echo 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890; echo 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890; sleep 1; echo -e the end -")
	assert.Nil(t, err)
	assert.Equal(t, list2.String("1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890",
		"1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890",
		"1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890",
		"1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 echo 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890",
		"1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890",
		"1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 echo 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890",
		"1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890",
		"1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890",
		"the end -"), list)
}

func TestOverrideEnvironment(t *testing.T) {
	cmd := []string{"env"}
	if runtime.GOOS == "windows" {
		cmd = []string{
			"cmd", "/c", "set",
		}
	}

	err, lines1 := ExecCmd(ExecParams{Env: nil}, cmd[0])
	assert.Nil(t, err)

	err, lines2 := ExecCmd(ExecParams{Env: []string{"VAR=1"}}, cmd[0])
	assert.Nil(t, err)

	assert.Equal(t, len(lines1)+1, len(lines2))
}
